"""
Integracni test pro Word subdoc workflow
Testuje: Upload Word -> ProjectManager -> CLI generovani
"""
import json
import shutil
import sys
from pathlib import Path
from core import FileManager, ProjectManager

# Fix Windows console encoding
sys.stdout.reconfigure(encoding='utf-8')

def test_word_subdoc_workflow():
    """Testuje cely workflow od nahrani Word po generovani protokolu"""

    print("="*60)
    print("INTEGRACNI TEST - Word Subdoc Workflow")
    print("="*60)

    # 1. Simulace nahr√°n√≠ Word v GUI
    print("\n[1/5] Simulace nahr√°n√≠ Word souboru...")
    source_word = Path("Vzor popis pr√°ce 2024/POPIS PR√ÅCE A PRACOVI≈†Tƒö.docx")

    if not source_word.exists():
        print(f"‚ùå CHYBA: Testovac√≠ Word neexistuje: {source_word}")
        return False

    file_manager = FileManager()
    temp_word_path = file_manager.save_uploaded_docx(str(source_word))
    print(f"‚úì Word zkop√≠rov√°n do temp: {temp_word_path}")

    # Ovƒõ≈ô, ≈æe soubor existuje
    if not temp_word_path.exists():
        print(f"‚ùå CHYBA: Temp soubor neexistuje: {temp_word_path}")
        return False
    print(f"‚úì Temp soubor existuje: {temp_word_path.name}")

    # 2. Naƒçten√≠ testovac√≠ch dat
    print("\n[2/5] Naƒç√≠t√°n√≠ testovac√≠ch measurement_data.json...")
    test_json = Path("measurement_data.json")

    if not test_json.exists():
        print(f"‚ùå CHYBA: Testovac√≠ JSON neexistuje: {test_json}")
        return False

    with open(test_json, encoding='utf-8') as f:
        project_data = json.load(f)

    # Aktualizuj cestu k nahran√©mu Word
    project_data["section1_uploaded_docx"]["uploaded_file_path"] = str(temp_word_path)
    print(f"‚úì JSON naƒçten, uploaded_file_path nastaven")

    # 3. Vytvo≈ôen√≠ projektu
    print("\n[3/5] Vytv√°≈ôen√≠ projektu pomoc√≠ ProjectManager...")
    project_manager = ProjectManager()

    try:
        project_folder = project_manager.create_project(project_data)
        print(f"‚úì Projekt vytvo≈ôen: {project_folder}")
    except Exception as e:
        print(f"‚ùå CHYBA p≈ôi vytv√°≈ôen√≠ projektu: {e}")
        import traceback
        traceback.print_exc()
        return False

    # 4. Ovƒõ≈ôen√≠ v√Ωsledk≈Ø
    print("\n[4/5] Ovƒõ≈ôov√°n√≠ v√Ωsledk≈Ø...")

    # Zkontroluj, ≈æe Word byl zkop√≠rov√°n do projektu
    evidence = project_data["section2_firma"]["evidence_number"]
    company = project_data["section2_firma"]["company"]

    # Sanitize n√°zvu (stejn√Ω algoritmus jako ProjectManager)
    expected_name = f"popis_prace_{evidence}_{company}.docx"
    for char in [" ", "/", "\\", ":", "*", "?", '"', "<", ">", "|", ".", ","]:
        expected_name = expected_name.replace(char, "_" if char == " " else "-" if char in "/\\:" else "")

    expected_word = project_folder / expected_name

    if not expected_word.exists():
        print(f"‚ùå CHYBA: Word nebyl zkop√≠rov√°n do projektu")
        print(f"   Oƒçek√°van√Ω soubor: {expected_word}")
        # Seznam soubor≈Ø v project folderu
        print(f"   Soubory v projektu: {list(project_folder.glob('*'))}")
        return False
    print(f"‚úì Word zkop√≠rov√°n do projektu: {expected_word.name}")

    # Zkontroluj measurement_data.json
    json_path = project_folder / "measurement_data.json"
    if not json_path.exists():
        print(f"‚ùå CHYBA: measurement_data.json nebyl vytvo≈ôen")
        return False

    with open(json_path, encoding='utf-8') as f:
        saved_data = json.load(f)

    # Zkontroluj, ≈æe obsahuje copied_file_path
    copied_path = saved_data.get("section1_uploaded_docx", {}).get("copied_file_path")
    if not copied_path:
        print(f"‚ùå CHYBA: JSON neobsahuje copied_file_path")
        return False

    if not Path(copied_path).exists():
        print(f"‚ùå CHYBA: copied_file_path ukazuje na neexistuj√≠c√≠ soubor: {copied_path}")
        return False

    print(f"‚úì measurement_data.json obsahuje spr√°vnou cestu: {Path(copied_path).name}")

    # 5. Test CLI generov√°n√≠ (simulace)
    print("\n[5/5] Simulace CLI generov√°n√≠ s Subdoc...")

    # Zkontroluj, ≈æe lsz_results.json existuje
    results_json = Path("lsz_results.json")
    if not results_json.exists():
        print(f"‚ö† Varov√°n√≠: lsz_results.json neexistuje, p≈ôeskakuji CLI test")
    else:
        template_path = Path("Vzorov√© protokoly/Autorizovan√© protokoly pro MU≈ΩE/lsz_placeholdery_v2.docx")
        if not template_path.exists():
            print(f"‚ö† Varov√°n√≠: Word ≈°ablona neexistuje, p≈ôeskakuji CLI test")
        else:
            print(f"‚úì V≈°echny soubory pro CLI generov√°n√≠ existuj√≠")
            print(f"   - measurement_data: {json_path}")
            print(f"   - results_data: {results_json}")
            print(f"   - template: {template_path}")

            # Informace o CLI p≈ô√≠kazu
            print(f"\nüí° Pro otestov√°n√≠ CLI generov√°n√≠ spus≈•:")
            print(f'   python generate_word_from_two_sources.py \\')
            print(f'     "{json_path}" \\')
            print(f'     "{results_json}" \\')
            print(f'     "{template_path}" \\')
            print(f'     "test_output_subdoc.docx" \\')
            print(f'     --variant v2')

    # Cleanup info
    print("\n" + "="*60)
    print("‚úÖ TEST √öSPƒö≈†N√ù!")
    print("="*60)
    print(f"\nüìÅ Projekt vytvo≈ôen v: {project_folder}")
    print(f"üìÑ Word dokument: {expected_word}")
    print(f"üìã JSON data: {json_path}")
    print(f"\nüí° Temp soubory budou vyƒçi≈°tƒõny p≈ôi zav≈ôen√≠ aplikace (atexit)")

    return True


if __name__ == "__main__":
    success = test_word_subdoc_workflow()
    exit(0 if success else 1)
