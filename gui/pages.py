"""
QWizardPage t≈ô√≠dy pro jednotliv√© sekce formul√°≈ôe
"""
from PyQt6.QtWidgets import (
    QWizardPage, QFormLayout, QVBoxLayout, QHBoxLayout, QLineEdit, QComboBox,
    QDateEdit, QSpinBox, QDoubleSpinBox, QTextEdit, QCheckBox, QLabel,
    QPushButton, QFileDialog, QTableWidget, QTableWidgetItem, QHeaderView,
    QMessageBox
)
from PyQt6.QtCore import QDate, Qt
from core import DocxParser


class Page0_VyberSouboru(QWizardPage):
    """Str√°nka 0: V√Ωbƒõr soubor≈Ø k vygenerov√°n√≠"""

    def __init__(self):
        super().__init__()
        self.setTitle("V√Ωbƒõr soubor≈Ø k vygenerov√°n√≠")
        self.setSubTitle("Vyberte, kter√© Excel soubory chcete vygenerovat")

        layout = QVBoxLayout()
        self.setLayout(layout)

        info_label = QLabel("Vyberte soubory ze slo≈æky 'Programy na vyhodnocov√°n√≠':")
        layout.addWidget(info_label)
        layout.addSpacing(10)

        self.checkbox_lsz = QCheckBox("LSZ - Lok√°ln√≠ svalov√° z√°tƒõ≈æ (LSZ_XX_firma_pozice.xlsm)")
        self.checkbox_pp_cas = QCheckBox("PP - Pracovn√≠ polohy - ƒåAS (PP_XX_firma_pozice[ƒåAS].xlsx)")
        self.checkbox_pp_kusy = QCheckBox("PP - Pracovn√≠ polohy - KUSY (PP_XX_firma_pozice[KUSY].xlsx)")
        self.checkbox_cfz = QCheckBox("CFZ - Celkov√° fyzick√° z√°tƒõ≈æ (CFZ_XX_firma_pozice.xlsx)")

        layout.addWidget(self.checkbox_lsz)
        layout.addWidget(self.checkbox_pp_cas)
        layout.addWidget(self.checkbox_pp_kusy)
        layout.addWidget(self.checkbox_cfz)
        layout.addStretch()


class Page1_UploadDocx(QWizardPage):
    """Str√°nka 1: Upload Word dokumentu a editace ƒçasov√©ho sn√≠mku"""

    def __init__(self):
        super().__init__()
        self.setTitle("ƒåasov√Ω sn√≠mek pracovn√≠ smƒõny")
        self.setSubTitle("Nahrajte Word dokument nebo vypl≈àte tabulku ruƒçnƒõ")

        layout = QVBoxLayout()
        self.setLayout(layout)

        # === Horn√≠ sekce: Upload souboru ===
        upload_section = QHBoxLayout()

        info_label = QLabel("Nahr√°t z Word dokumentu:")
        upload_section.addWidget(info_label)

        self.upload_button = QPushButton("Vybrat soubor...")
        self.upload_button.clicked.connect(self._select_file)
        upload_section.addWidget(self.upload_button)

        self.file_path_label = QLabel("(≈Ω√°dn√Ω soubor)")
        self.file_path_label.setStyleSheet("color: gray; font-style: italic;")
        upload_section.addWidget(self.file_path_label)
        upload_section.addStretch()

        layout.addLayout(upload_section)
        layout.addSpacing(10)

        # === Tlaƒç√≠tka pro √∫pravu tabulky ===
        buttons_layout = QHBoxLayout()

        self.add_row_button = QPushButton("‚ûï P≈ôidat ≈ô√°dek")
        self.add_row_button.clicked.connect(self._add_row)
        buttons_layout.addWidget(self.add_row_button)

        self.remove_row_button = QPushButton("‚ûñ Odebrat vybran√Ω ≈ô√°dek")
        self.remove_row_button.clicked.connect(self._remove_row)
        buttons_layout.addWidget(self.remove_row_button)

        self.clear_button = QPushButton("üóëÔ∏è Vymazat v≈°e")
        self.clear_button.clicked.connect(self._clear_table)
        buttons_layout.addWidget(self.clear_button)

        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        layout.addSpacing(5)

        # === Tabulka ƒçasov√©ho sn√≠mku ===
        self.table = QTableWidget()
        self.table.setColumnCount(4)
        self.table.setHorizontalHeaderLabels([
            "ƒå√≠slo",
            "Operace/ƒåinnost",
            "ƒåas (min)",
            "Poƒçet kus≈Ø"
        ])

        # Nastaven√≠ ≈°√≠≈ôky sloupc≈Ø
        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # ƒå√≠slo
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)  # Operace (rozta≈æiteln√Ω)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)  # ƒåas
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)  # Kusy

        self.table.setMinimumHeight(300)
        layout.addWidget(self.table)

        # === ≈ò√°dek CELKEM (read-only, automaticky vypoƒç√≠tan√Ω) ===
        total_layout = QHBoxLayout()
        total_layout.addWidget(QLabel("<b>CELKEM:</b>"))

        self.total_time_label = QLabel("ƒåas: 0 min")
        self.total_time_label.setStyleSheet("font-weight: bold; color: #0066cc;")
        total_layout.addWidget(self.total_time_label)

        total_layout.addSpacing(20)

        self.total_pieces_label = QLabel("Kus≈Ø: 0")
        self.total_pieces_label.setStyleSheet("font-weight: bold; color: #0066cc;")
        total_layout.addWidget(self.total_pieces_label)

        total_layout.addStretch()
        layout.addLayout(total_layout)

        # P≈ôipoj sign√°l pro aktualizaci celkov√Ωch hodnot
        self.table.cellChanged.connect(self._update_totals)

        # Intern√≠ promƒõnn√°
        self.selected_file_path = None

        # Inicializuj s pr√°zdn√Ωmi ≈ô√°dky
        self._initialize_empty_table()

    def _initialize_empty_table(self):
        """Inicializuje tabulku s 5 pr√°zdn√Ωmi ≈ô√°dky"""
        for _ in range(5):
            self._add_row()

    def _select_file(self):
        """Otev≈ôe dialog pro v√Ωbƒõr .docx souboru a naƒçte data"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Vyberte Word dokument",
            "",
            "Word dokumenty (*.docx);;V≈°echny soubory (*.*)"
        )

        if file_path:
            self.selected_file_path = file_path
            self.file_path_label.setText(f"üìÑ {file_path.split('/')[-1]}")
            self.file_path_label.setStyleSheet("color: green;")

            # Automaticky naƒçti data z Word dokumentu
            self._load_from_docx(file_path)

    def _load_from_docx(self, file_path: str):
        """Naƒçte data z Word dokumentu a napln√≠ tabulku"""
        try:
            # Naparsuj Word dokument
            time_schedule = DocxParser.parse_time_schedule_table(file_path)

            # Vyma≈æ aktu√°ln√≠ obsah tabulky
            self.table.setRowCount(0)

            # Napl≈à tabulku daty
            for i in range(1, 21):  # line1...line20
                line_data = time_schedule.get(f"line{i}", {})

                # P≈ôeskoƒç pr√°zdn√© ≈ô√°dky na konci
                if not line_data.get("operation") and not line_data.get("time_min"):
                    continue

                row_position = self.table.rowCount()
                self.table.insertRow(row_position)

                # Vypl≈à bu≈àky
                self.table.setItem(row_position, 0, QTableWidgetItem(str(line_data.get("number", ""))))
                self.table.setItem(row_position, 1, QTableWidgetItem(str(line_data.get("operation", ""))))
                self.table.setItem(row_position, 2, QTableWidgetItem(str(line_data.get("time_min") or "")))
                self.table.setItem(row_position, 3, QTableWidgetItem(str(line_data.get("pieces_count") or "")))

            self._update_totals()

            QMessageBox.information(
                self,
                "√öspƒõch",
                f"Naƒçteno {self.table.rowCount()} ≈ô√°dk≈Ø z Word dokumentu."
            )

        except Exception as e:
            QMessageBox.warning(
                self,
                "Chyba p≈ôi naƒç√≠t√°n√≠",
                f"Nepoda≈ôilo se naƒç√≠st data z dokumentu:\n{str(e)}"
            )

    def _add_row(self):
        """P≈ôid√° nov√Ω pr√°zdn√Ω ≈ô√°dek do tabulky"""
        row_position = self.table.rowCount()
        self.table.insertRow(row_position)

        # Automaticky vypl≈à ƒç√≠slo ≈ô√°dku
        self.table.setItem(row_position, 0, QTableWidgetItem(str(row_position + 1)))

    def _remove_row(self):
        """Odebere aktu√°lnƒõ vybran√Ω ≈ô√°dek"""
        current_row = self.table.currentRow()
        if current_row >= 0:
            self.table.removeRow(current_row)
            self._update_totals()
        else:
            QMessageBox.information(self, "Info", "Nejprve vyberte ≈ô√°dek k odstranƒõn√≠.")

    def _clear_table(self):
        """Vyma≈æe v≈°echny ≈ô√°dky tabulky"""
        reply = QMessageBox.question(
            self,
            "Potvrzen√≠",
            "Opravdu chcete vymazat v≈°echny ≈ô√°dky?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            self.table.setRowCount(0)
            self._update_totals()

    def _update_totals(self):
        """Aktualizuje celkov√© souƒçty (ƒças a kusy)"""
        total_time = 0
        total_pieces = 0

        for row in range(self.table.rowCount()):
            # ƒåas
            time_item = self.table.item(row, 2)
            if time_item and time_item.text().strip():
                try:
                    total_time += int(time_item.text())
                except ValueError:
                    pass

            # Kusy
            pieces_item = self.table.item(row, 3)
            if pieces_item and pieces_item.text().strip():
                try:
                    total_pieces += int(pieces_item.text())
                except ValueError:
                    pass

        self.total_time_label.setText(f"ƒåas: {total_time} min")
        self.total_pieces_label.setText(f"Kus≈Ø: {total_pieces}")

    def get_table_data(self):
        """
        Vr√°t√≠ data z tabulky ve form√°tu kompatibiln√≠m s DocxParser v√Ωstupem.

        Returns:
            Dictionary s line1...lineN a total
        """
        result = {}

        for row in range(self.table.rowCount()):
            number_item = self.table.item(row, 0)
            operation_item = self.table.item(row, 1)
            time_item = self.table.item(row, 2)
            pieces_item = self.table.item(row, 3)

            result[f"line{row + 1}"] = {
                "number": number_item.text() if number_item else "",
                "operation": operation_item.text() if operation_item else "",
                "time_min": int(time_item.text()) if time_item and time_item.text().strip() else None,
                "pieces_count": int(pieces_item.text()) if pieces_item and pieces_item.text().strip() else None
            }

        # P≈ôidej total (spoƒç√≠tan√© hodnoty)
        total_time = 0
        total_pieces = 0
        for row_data in result.values():
            if row_data.get("time_min"):
                total_time += row_data["time_min"]
            if row_data.get("pieces_count"):
                total_pieces += row_data["pieces_count"]

        result["total"] = {
            "time_min": total_time,
            "pieces_count": total_pieces
        }

        return result


class Page2_Firma(QWizardPage):
    """Str√°nka 2: Z√°kladn√≠ √∫daje o firmƒõ"""

    def __init__(self):
        super().__init__()
        self.setTitle("Firma")
        layout = QFormLayout()
        self.setLayout(layout)

        self.firma = QLineEdit()
        self.nazev_profese = QLineEdit()
        self.misto_mereni = QLineEdit()
        self.pracoviste = QLineEdit()
        self.ico = QLineEdit()
        self.smennost = QLineEdit()
        self.datum_mereni = QDateEdit()
        self.datum_mereni.setDate(QDate.currentDate())
        self.datum_mereni.setCalendarPopup(True)
        self.evidencni_cislo = QLineEdit()

        layout.addRow("Firma:", self.firma)
        layout.addRow("N√°zev Profese:", self.nazev_profese)
        layout.addRow("M√≠sto mƒõ≈ôen√≠:", self.misto_mereni)
        layout.addRow("Pracovi≈°tƒõ:", self.pracoviste)
        layout.addRow("IƒåO:", self.ico)
        layout.addRow("Smƒõnnost:", self.smennost)
        layout.addRow("Datum mƒõ≈ôen√≠:", self.datum_mereni)
        layout.addRow("Evidenƒçn√≠ ƒç√≠slo:", self.evidencni_cislo)


class Page3_DalsiUdaje(QWizardPage):
    """Str√°nka 3: Dal≈°√≠ √∫daje o mƒõ≈ôen√≠"""

    def __init__(self):
        super().__init__()
        self.setTitle("Dal≈°√≠ √∫daje")
        layout = QFormLayout()
        self.setLayout(layout)

        self.stanovena_norma = QLineEdit()
        self.typ_vyrobku = QLineEdit()

        self.prace_vykonavana = QComboBox()
        self.prace_vykonavana.addItems(["stoj", "sed", "ch≈Øze"])

        self.pohlavi_pracovniku = QComboBox()
        self.pohlavi_pracovniku.addItems(["mu≈æi", "≈æeny"])

        self.vyska_pracovni_roviny = QLineEdit()
        self.hmotnost_min = QDoubleSpinBox()
        self.hmotnost_min.setMaximum(999.99)
        self.hmotnost_min.setSuffix(" kg")
        self.hmotnost_max = QDoubleSpinBox()
        self.hmotnost_max.setMaximum(999.99)
        self.hmotnost_max.setSuffix(" kg")

        layout.addRow("Stanoven√° norma:", self.stanovena_norma)
        layout.addRow("Typ v√Ωrobku:", self.typ_vyrobku)
        layout.addRow("Pr√°ce je vykon√°van√°:", self.prace_vykonavana)
        layout.addRow("Pohlav√≠ pracovn√≠k≈Ø na mƒõ≈ôen√© pozici:", self.pohlavi_pracovniku)
        layout.addRow("V√Ω≈°ka pracovn√≠ roviny:", self.vyska_pracovni_roviny)
        layout.addRow("Hmotnost ruƒçnƒõ zvedan√Ωch b≈ôemen (min):", self.hmotnost_min)
        layout.addRow("Hmotnost ruƒçnƒõ zvedan√Ωch b≈ôemen (max):", self.hmotnost_max)


class Page4_PracovnikA(QWizardPage):
    """Str√°nka 4: √ödaje o pracovn√≠kovi A"""

    def __init__(self):
        super().__init__()
        self.setTitle("Pracovn√≠k A")
        layout = QFormLayout()
        self.setLayout(layout)

        self.jmeno_a = QLineEdit()
        self.vek_a = QSpinBox()
        self.vek_a.setMaximum(120)
        self.delka_expozice_a = QSpinBox()
        self.delka_expozice_a.setMaximum(100)
        self.vyska_a = QSpinBox()
        self.vyska_a.setMaximum(250)
        self.vaha_a = QDoubleSpinBox()
        self.vaha_a.setMaximum(300.0)

        self.lateralita_a = QComboBox()
        self.lateralita_a.addItems(["pravostrann√°", "levostrann√°"])

        self.sila_phk_a = QDoubleSpinBox()
        self.sila_phk_a.setMaximum(9999.99)
        self.sila_lhk_a = QDoubleSpinBox()
        self.sila_lhk_a.setMaximum(9999.99)

        self.emg_holter_a = QComboBox()
        self.emg_holter_a.addItems(["A", "B", "C", "D", "E", "F"])

        self.polar_a = QComboBox()
        self.polar_a.addItems(["1", "2", "3", "4", "5", "6", "7", "8"])

        self.doba_vykonu_a = QLineEdit()
        self.prestavky_a = QLineEdit()
        self.cislo_hrudniho_pasu_a = QLineEdit()
        self.zacatek_mereni_a = QLineEdit()
        self.kod_a = QLineEdit()

        layout.addRow("Jm√©no a p≈ô√≠jmen√≠:", self.jmeno_a)
        layout.addRow("Vƒõk (let):", self.vek_a)
        layout.addRow("D√©lka expozice (let):", self.delka_expozice_a)
        layout.addRow("V√Ω≈°ka (cm):", self.vyska_a)
        layout.addRow("V√°ha (kg):", self.vaha_a)
        layout.addRow("Lateralita:", self.lateralita_a)
        layout.addRow("S√≠la stisku ruky PHK (N):", self.sila_phk_a)
        layout.addRow("S√≠la stisku ruky LHK (N):", self.sila_lhk_a)
        layout.addRow("EMG Holter:", self.emg_holter_a)
        layout.addRow("Polar:", self.polar_a)
        layout.addRow("Doba v√Ωkonu pr√°ce:", self.doba_vykonu_a)
        layout.addRow("P≈ôest√°vky:", self.prestavky_a)
        layout.addRow("ƒå√≠slo hrudn√≠ho p√°su:", self.cislo_hrudniho_pasu_a)
        layout.addRow("Zaƒç√°tek mƒõ≈ôen√≠:", self.zacatek_mereni_a)
        layout.addRow("K√≥d:", self.kod_a)


class Page5_PracovnikB(QWizardPage):
    """Str√°nka 5: √ödaje o pracovn√≠kovi B (optional)"""

    def __init__(self):
        super().__init__()
        self.setTitle("Pracovn√≠k B (optional)")
        layout = QFormLayout()
        self.setLayout(layout)

        self.jmeno_b = QLineEdit()
        self.vek_b = QSpinBox()
        self.vek_b.setMaximum(120)
        self.delka_expozice_b = QSpinBox()
        self.delka_expozice_b.setMaximum(100)
        self.vyska_b = QSpinBox()
        self.vyska_b.setMaximum(250)
        self.vaha_b = QDoubleSpinBox()
        self.vaha_b.setMaximum(300.0)

        self.lateralita_b = QComboBox()
        self.lateralita_b.addItems(["pravostrann√°", "levostrann√°"])

        self.sila_phk_b = QDoubleSpinBox()
        self.sila_phk_b.setMaximum(9999.99)
        self.sila_lhk_b = QDoubleSpinBox()
        self.sila_lhk_b.setMaximum(9999.99)

        self.emg_holter_b = QComboBox()
        self.emg_holter_b.addItems(["A", "B", "C", "D", "E", "F"])

        self.polar_b = QComboBox()
        self.polar_b.addItems(["1", "2", "3", "4", "5", "6", "7", "8"])

        self.doba_vykonu_b = QLineEdit()
        self.prestavky_b = QLineEdit()
        self.cislo_hrudniho_pasu_b = QLineEdit()
        self.zacatek_mereni_b = QLineEdit()
        self.kod_b = QLineEdit()

        layout.addRow("Jm√©no a p≈ô√≠jmen√≠:", self.jmeno_b)
        layout.addRow("Vƒõk (let):", self.vek_b)
        layout.addRow("D√©lka expozice (let):", self.delka_expozice_b)
        layout.addRow("V√Ω≈°ka (cm):", self.vyska_b)
        layout.addRow("V√°ha (kg):", self.vaha_b)
        layout.addRow("Lateralita:", self.lateralita_b)
        layout.addRow("S√≠la stisku ruky PHK (N):", self.sila_phk_b)
        layout.addRow("S√≠la stisku ruky LHK (N):", self.sila_lhk_b)
        layout.addRow("EMG Holter:", self.emg_holter_b)
        layout.addRow("Polar:", self.polar_b)
        layout.addRow("Doba v√Ωkonu pr√°ce:", self.doba_vykonu_b)
        layout.addRow("P≈ôest√°vky:", self.prestavky_b)
        layout.addRow("ƒå√≠slo hrudn√≠ho p√°su:", self.cislo_hrudniho_pasu_b)
        layout.addRow("Zaƒç√°tek mƒõ≈ôen√≠:", self.zacatek_mereni_b)
        layout.addRow("K√≥d:", self.kod_b)


class Page6_Zaverecne(QWizardPage):
    """Str√°nka 6: Z√°vƒõreƒçn√© √∫daje"""

    def __init__(self):
        super().__init__()
        self.setTitle("Z√°vƒõreƒçn√© √∫daje")
        layout = QFormLayout()
        self.setLayout(layout)

        self.mereni_provedl = QLineEdit()
        self.poznamky = QTextEdit()
        self.poznamky.setMaximumHeight(100)

        layout.addRow("Mƒõ≈ôen√≠ provedl:", self.mereni_provedl)
        layout.addRow("Pozn√°mky:", self.poznamky)
